{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab8ba1dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Comparison  Mean Difference  t-statistic   p-value  CI Lower  CI Upper\n",
      "0  Patv vs PW1          -1.2760    -2.053132  0.040086 -2.494244 -0.057756\n",
      "1  Patv vs EW1           1.1367     1.040614  0.298080 -1.004498  3.277898\n",
      "2  Patv vs EW2           1.7972     1.674298  0.094103 -0.306890  3.901290\n",
      "3  Patv vs EW3           1.6251     1.357793  0.174560 -0.721003  3.971203\n",
      "4  Patv vs EW4           2.2334     1.667245  0.095497 -0.392437  4.859237\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from scipy import stats\n",
    "\n",
    "data = pd.read_csv('Results_of_all.csv')\n",
    "\n",
    "# Function to compute paired t-test and 95% CI\n",
    "def paired_test_and_ci(x, y, label):\n",
    "    differences = x - y\n",
    "    mean_diff = differences.mean()\n",
    "    std_diff = differences.std(ddof=1)\n",
    "    n = len(differences)\n",
    "    se_diff = std_diff / np.sqrt(n)\n",
    "    t_stat, p_value = stats.ttest_rel(x, y)\n",
    "    t_crit = stats.t.ppf(1-0.025, df=n-1)  # two-tailed 95% CI\n",
    "    ci_lower = mean_diff - t_crit * se_diff\n",
    "    ci_upper = mean_diff + t_crit * se_diff\n",
    "    return {\n",
    "        \"Comparison\": label,\n",
    "        \"Mean Difference\": mean_diff,\n",
    "        \"t-statistic\": t_stat,\n",
    "        \"p-value\": p_value,\n",
    "        \"CI Lower\": ci_lower,\n",
    "        \"CI Upper\": ci_upper\n",
    "    }\n",
    "\n",
    "results = []\n",
    "results.append(paired_test_and_ci(data['Patv'], data['PW1'], \"Patv vs PW1\"))\n",
    "results.append(paired_test_and_ci(data['Patv'], data['EW1'], \"Patv vs EW1\"))\n",
    "results.append(paired_test_and_ci(data['Patv'], data['EW2'], \"Patv vs EW2\"))\n",
    "results.append(paired_test_and_ci(data['Patv'], data['EW3'], \"Patv vs EW3\"))\n",
    "results.append(paired_test_and_ci(data['Patv'], data['EW4'], \"Patv vs EW4\"))\n",
    "\n",
    "# Display results as a DataFrame\n",
    "df_results = pd.DataFrame(results)\n",
    "print(df_results)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8cdab78e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'PW1': 0.9861341713133011,\n",
       " 'EW1': 0.957179228466965,\n",
       " 'EW2': 0.958643443582468,\n",
       " 'EW3': 0.9485875595741494,\n",
       " 'EW4': 0.9355904465509159}"
      ]
     },
     "execution_count": 437,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_csv('Results_of_all.csv')\n",
    "\n",
    "# Actual values\n",
    "y = df['Patv'].values\n",
    "y_mean = np.mean(y)\n",
    "\n",
    "# Total sum of squares\n",
    "ss_tot = np.sum((y - y_mean)**2)\n",
    "\n",
    "manual_r2_scores = {}\n",
    "\n",
    "# Loop through predicted columns\n",
    "for col in ['PW1', 'EW1', 'EW2', 'EW3', 'EW4']:\n",
    "    y_pred = df[col].values\n",
    "    ss_res = np.sum((y - y_pred)**2)\n",
    "    r2 = 1 - (ss_res/ss_tot)\n",
    "    manual_r2_scores[col] = r2\n",
    "\n",
    "manual_r2_scores\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c95fd00f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "571717c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
